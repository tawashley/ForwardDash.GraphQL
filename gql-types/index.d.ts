/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  name: string;
  weather: GQLWeather;
  f1Data: GQLF1Data;
}

export interface GQLWeather {
  current: GQLWeatherCurrent;
  forecast: Array<GQLWeatherForecast>;
}

export interface GQLWeatherCurrent {
  location: GQLWeatherLocation;
  temperature: GQLWeatherTemperature;
  feelsLike: GQLWeatherTemperature;
  condition: GQLWeatherCondition;
  wind: GQLWeatherWind;
  gust: GQLWeatherVelocity;
  pressure: GQLWeatherPressure;
  rain: GQLWeatherRain;
  humidityPercentage: number;
  cloudCoverPercentage: number;
  isDaytime: boolean;
  uvIndex: number;
}

export interface GQLWeatherLocation {
  name: string;
  region: string;
  country: string;
  latitude: number;
  longitude: number;
  timezone: string;
  timeEpoch: number;
  timeFormatted: string;
}

export interface GQLWeatherTemperature {
  celsius: number;
  fahrenheit: number;
}

export interface GQLWeatherCondition {
  text: string;
  code: number;
  iconSrc: string;
}

export interface GQLWeatherWind {
  mph: number;
  kph: number;
  direction: GQLWeatherWindDirection;
}

export interface GQLWeatherWindDirection {
  degree: number;
  compass: string;
}

export interface GQLWeatherVelocity {
  mph: number;
  kph: number;
}

export interface GQLWeatherPressure {
  millibars: number;
  inches: number;
}

export interface GQLWeatherRain {
  millimeters: number;
  inches: number;
}

export interface GQLWeatherForecast {
  date: string;
  dateEpoch: number;
  maxTemperature: GQLWeatherTemperature;
  minTemperature: GQLWeatherTemperature;
  averageTemperature: GQLWeatherTemperature;
  condition: GQLWeatherCondition;
  uvIndex: number;
  sunrise: string;
  sunset: string;
  moonrise: string;
  moonset: string;
}

export interface GQLF1Data {
  raceSchedule: GQLF1RaceSchedule;
}

export interface GQLF1RaceSchedule {
  numberOfRaces: number;
  races: Array<GQLF1DataCircuit>;
}

export interface GQLF1DataCircuit {
  round: number;
  raceName: string;
  circuitName: string;
  date: string;
  country: string;
  location: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Weather?: GQLWeatherTypeResolver;
  WeatherCurrent?: GQLWeatherCurrentTypeResolver;
  WeatherLocation?: GQLWeatherLocationTypeResolver;
  WeatherTemperature?: GQLWeatherTemperatureTypeResolver;
  WeatherCondition?: GQLWeatherConditionTypeResolver;
  WeatherWind?: GQLWeatherWindTypeResolver;
  WeatherWindDirection?: GQLWeatherWindDirectionTypeResolver;
  WeatherVelocity?: GQLWeatherVelocityTypeResolver;
  WeatherPressure?: GQLWeatherPressureTypeResolver;
  WeatherRain?: GQLWeatherRainTypeResolver;
  WeatherForecast?: GQLWeatherForecastTypeResolver;
  F1Data?: GQLF1DataTypeResolver;
  F1RaceSchedule?: GQLF1RaceScheduleTypeResolver;
  F1DataCircuit?: GQLF1DataCircuitTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  name?: QueryToNameResolver<TParent>;
  weather?: QueryToWeatherResolver<TParent>;
  f1Data?: QueryToF1DataResolver<TParent>;
}

export interface QueryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToWeatherArgs {
  location: string;
}
export interface QueryToWeatherResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToWeatherArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToF1DataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherTypeResolver<TParent = any> {
  current?: WeatherToCurrentResolver<TParent>;
  forecast?: WeatherToForecastResolver<TParent>;
}

export interface WeatherToCurrentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherToForecastArgs {
  days: string;
}
export interface WeatherToForecastResolver<TParent = any, TResult = any> {
  (parent: TParent, args: WeatherToForecastArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherCurrentTypeResolver<TParent = any> {
  location?: WeatherCurrentToLocationResolver<TParent>;
  temperature?: WeatherCurrentToTemperatureResolver<TParent>;
  feelsLike?: WeatherCurrentToFeelsLikeResolver<TParent>;
  condition?: WeatherCurrentToConditionResolver<TParent>;
  wind?: WeatherCurrentToWindResolver<TParent>;
  gust?: WeatherCurrentToGustResolver<TParent>;
  pressure?: WeatherCurrentToPressureResolver<TParent>;
  rain?: WeatherCurrentToRainResolver<TParent>;
  humidityPercentage?: WeatherCurrentToHumidityPercentageResolver<TParent>;
  cloudCoverPercentage?: WeatherCurrentToCloudCoverPercentageResolver<TParent>;
  isDaytime?: WeatherCurrentToIsDaytimeResolver<TParent>;
  uvIndex?: WeatherCurrentToUvIndexResolver<TParent>;
}

export interface WeatherCurrentToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToTemperatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToFeelsLikeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToConditionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToWindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToGustResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToPressureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToRainResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToHumidityPercentageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToCloudCoverPercentageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToIsDaytimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherCurrentToUvIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherLocationTypeResolver<TParent = any> {
  name?: WeatherLocationToNameResolver<TParent>;
  region?: WeatherLocationToRegionResolver<TParent>;
  country?: WeatherLocationToCountryResolver<TParent>;
  latitude?: WeatherLocationToLatitudeResolver<TParent>;
  longitude?: WeatherLocationToLongitudeResolver<TParent>;
  timezone?: WeatherLocationToTimezoneResolver<TParent>;
  timeEpoch?: WeatherLocationToTimeEpochResolver<TParent>;
  timeFormatted?: WeatherLocationToTimeFormattedResolver<TParent>;
}

export interface WeatherLocationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherLocationToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherLocationToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherLocationToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherLocationToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherLocationToTimezoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherLocationToTimeEpochResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherLocationToTimeFormattedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherTemperatureTypeResolver<TParent = any> {
  celsius?: WeatherTemperatureToCelsiusResolver<TParent>;
  fahrenheit?: WeatherTemperatureToFahrenheitResolver<TParent>;
}

export interface WeatherTemperatureToCelsiusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherTemperatureToFahrenheitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherConditionTypeResolver<TParent = any> {
  text?: WeatherConditionToTextResolver<TParent>;
  code?: WeatherConditionToCodeResolver<TParent>;
  iconSrc?: WeatherConditionToIconSrcResolver<TParent>;
}

export interface WeatherConditionToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherConditionToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherConditionToIconSrcResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherWindTypeResolver<TParent = any> {
  mph?: WeatherWindToMphResolver<TParent>;
  kph?: WeatherWindToKphResolver<TParent>;
  direction?: WeatherWindToDirectionResolver<TParent>;
}

export interface WeatherWindToMphResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherWindToKphResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherWindToDirectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherWindDirectionTypeResolver<TParent = any> {
  degree?: WeatherWindDirectionToDegreeResolver<TParent>;
  compass?: WeatherWindDirectionToCompassResolver<TParent>;
}

export interface WeatherWindDirectionToDegreeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherWindDirectionToCompassResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherVelocityTypeResolver<TParent = any> {
  mph?: WeatherVelocityToMphResolver<TParent>;
  kph?: WeatherVelocityToKphResolver<TParent>;
}

export interface WeatherVelocityToMphResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherVelocityToKphResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherPressureTypeResolver<TParent = any> {
  millibars?: WeatherPressureToMillibarsResolver<TParent>;
  inches?: WeatherPressureToInchesResolver<TParent>;
}

export interface WeatherPressureToMillibarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherPressureToInchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherRainTypeResolver<TParent = any> {
  millimeters?: WeatherRainToMillimetersResolver<TParent>;
  inches?: WeatherRainToInchesResolver<TParent>;
}

export interface WeatherRainToMillimetersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherRainToInchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWeatherForecastTypeResolver<TParent = any> {
  date?: WeatherForecastToDateResolver<TParent>;
  dateEpoch?: WeatherForecastToDateEpochResolver<TParent>;
  maxTemperature?: WeatherForecastToMaxTemperatureResolver<TParent>;
  minTemperature?: WeatherForecastToMinTemperatureResolver<TParent>;
  averageTemperature?: WeatherForecastToAverageTemperatureResolver<TParent>;
  condition?: WeatherForecastToConditionResolver<TParent>;
  uvIndex?: WeatherForecastToUvIndexResolver<TParent>;
  sunrise?: WeatherForecastToSunriseResolver<TParent>;
  sunset?: WeatherForecastToSunsetResolver<TParent>;
  moonrise?: WeatherForecastToMoonriseResolver<TParent>;
  moonset?: WeatherForecastToMoonsetResolver<TParent>;
}

export interface WeatherForecastToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToDateEpochResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToMaxTemperatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToMinTemperatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToAverageTemperatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToConditionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToUvIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToSunriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToSunsetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToMoonriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WeatherForecastToMoonsetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLF1DataTypeResolver<TParent = any> {
  raceSchedule?: F1DataToRaceScheduleResolver<TParent>;
}

export interface F1DataToRaceScheduleArgs {
  year: string;
}
export interface F1DataToRaceScheduleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: F1DataToRaceScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLF1RaceScheduleTypeResolver<TParent = any> {
  numberOfRaces?: F1RaceScheduleToNumberOfRacesResolver<TParent>;
  races?: F1RaceScheduleToRacesResolver<TParent>;
}

export interface F1RaceScheduleToNumberOfRacesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface F1RaceScheduleToRacesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLF1DataCircuitTypeResolver<TParent = any> {
  round?: F1DataCircuitToRoundResolver<TParent>;
  raceName?: F1DataCircuitToRaceNameResolver<TParent>;
  circuitName?: F1DataCircuitToCircuitNameResolver<TParent>;
  date?: F1DataCircuitToDateResolver<TParent>;
  country?: F1DataCircuitToCountryResolver<TParent>;
  location?: F1DataCircuitToLocationResolver<TParent>;
}

export interface F1DataCircuitToRoundResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface F1DataCircuitToRaceNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface F1DataCircuitToCircuitNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface F1DataCircuitToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface F1DataCircuitToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface F1DataCircuitToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
